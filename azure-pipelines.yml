# Maven
# Build your Java project and run tests with Apache Maven.
# Add steps that analyze code, save build artifacts, deploy, and more:
# https://docs.microsoft.com/azure/devops/pipelines/languages/java

trigger:
- feature-ms-guillermoEchague-DevOpsConfigurationJava

pool: 
  vmImage: ubuntu-latest

steps:

- task: Gradle@3
  inputs:
    gradleWrapperFile: 'gradlew'
    tasks: 'build'
    publishJUnitResults: true
    testResultsFiles: '**/TEST-*.xml'
    javaHomeOption: 'JDKVersion'
    sonarQubeRunAnalysis: false
    spotBugsAnalysis: false
  displayName: Build Project



- task: SonarCloudPrepare@1
  inputs:
    SonarCloud: 'SonarCloud'
    organization: 'guillermoechague'
    scannerMode: 'Other'
    extraProperties: |
      # Additional properties that will be passed to the scanner,
      # Put one key=value per line, example:
      # sonar.exclusions=**/*.bin
      sonar.projectKey=guillermoechague_tarea-devops-foundation
      sonar.projectName=tarea-devops-foundation
  displayName: Prepare SonarCloud Analysis


- task: Gradle@3
  inputs:
    gradleWrapperFile: 'gradlew'
    tasks: 'sonarqube'
    publishJUnitResults: true
    testResultsFiles: '**/TEST-*.xml'
    javaHomeOption: 'JDKVersion'
    sonarQubeRunAnalysis: true
    sqGradlePluginVersionChoice: 'specify'
    sonarQubeGradlePluginVersion: '3.3'
    spotBugsAnalysis: false
  displayName: SonarCloud Analysis



- task: SonarCloudPublish@1
  inputs:
    pollingTimeoutSec: '300'

- task: Docker@2
  inputs:
    containerRegistry: 'docker-tarea'
    command: 'login'
  displayName: Docker Login

- task: Docker@2
  inputs:
    containerRegistry: 'docker-tarea'
    repository: 'echaguiller/tarea-devops'
    command: 'build'
    Dockerfile: '**/Dockerfile'
  displayName: Docker Build Image

- task: Docker@2
  inputs:
    containerRegistry: 'docker-tarea'
    repository: 'echaguiller/tarea-devops'
    command: 'push'
    Dockerfile: '**/Dockerfile'
  displayName: Docker Push

- task: KubectlInstaller@0
  inputs:
    kubectlVersion: 'latest'
  displayName: Instalacion Kubectl
      
- task: Kubernetes@1
  inputs:
    connectionType: 'Azure Resource Manager'
    azureSubscriptionEndpoint: 'azure(9909fced-8203-44b6-af68-11f833a37e60)'
    azureResourceGroup: 'aks-getting-started'
    kubernetesCluster: 'aks-getting-started'
    namespace: 'default'
    command: 'login'
  displayName: AKS Login

- task: Kubernetes@1
  inputs:
    connectionType: 'Azure Resource Manager'
    azureSubscriptionEndpoint: 'azure(9909fced-8203-44b6-af68-11f833a37e60)'
    azureResourceGroup: 'aks-getting-started'
    kubernetesCluster: 'aks-getting-started'
    namespace: 'default'
    command: 'apply'
    arguments: '-f kubernetes/deployment-app.yaml'
    secretType: 'dockerRegistry'
    containerRegistryType: 'Azure Container Registry'
    azureSubscriptionEndpointForSecrets: 'azure(9909fced-8203-44b6-af68-11f833a37e60)'
  displayName: AKS deploy
    
- task: Kubernetes@1
  inputs:
    connectionType: 'Azure Resource Manager'
    azureSubscriptionEndpoint: 'azure(9909fced-8203-44b6-af68-11f833a37e60)'
    azureResourceGroup: 'aks-getting-started'
    kubernetesCluster: 'aks-getting-started'
    namespace: 'default'
    command: 'expose'
    arguments: 'deployment petclinic-deployment --type=LoadBalancer --name=pet-clinic'
    secretType: 'dockerRegistry'
    containerRegistryType: 'Azure Container Registry'
  continueOnError: true
  displayName: Expose deployment
    
- script: |
    ipApp=$(kubectl get services pet-clinic --output jsonpath='{.status.loadBalancer.ingress[0].ip}')
    echo $ipApp
    URLApp=http://$ipApp:8085
    echo $URLApp
    echo "##vso[task.setvariable variable=appDeploy;isOutput=true]$URLApp"
  name: getip
  displayName: Get IP